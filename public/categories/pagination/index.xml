<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pagination on Amodh's Blog</title><link>https://example.org/categories/pagination/</link><description>Recent content in Pagination on Amodh's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 22 Jan 2024 11:36:55 +0530</lastBuildDate><atom:link href="https://example.org/categories/pagination/index.xml" rel="self" type="application/rss+xml"/><item><title>React Pagination</title><link>https://example.org/pagination/</link><pubDate>Mon, 22 Jan 2024 11:36:55 +0530</pubDate><guid>https://example.org/pagination/</guid><description>Pagination Using React In this blog lets understand how to implement pagination using React fundamentals
Concepts that are used in this are :
useState useEffect async await Lets understand the use of these hooks &amp;ndash;&amp;gt;
useState : Generally useState is mainly used to display the change in UI or store some data whenever an event is triggered by the user. In the case of pagination this hook is mainly used to handle the products part as well as change of pages cause whenever the user clicks on page-2 button different products needs to displayed so it completely makes sense to use useState hook to the pages button similarly as soon as you reach to some new page new products needs to be displayed so adding a state to products list also makes sense const [products, setProducts] = useState([]); const [pages, setPages] = useState(1); Use of async/await : As we are using a third party API to fetch the data of the products so it will take time to return the response so dont wanna stop the execution of the remaining code so we make this task asynchronous by using async/await .</description></item></channel></rss>